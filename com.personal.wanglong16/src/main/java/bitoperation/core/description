一、java 位运算操作符：
1.1 >> n 右移n位 = 除 2的n次方
eg. 0100 >> 2 = 0001 : 4 / 2 * 2 = 1

1.2 << n 左移n位 = 乘 2的n次方
eg. 0100 << 2 = 10000 : 4 * 2 * 2 = 16

1.3 & 按位与
同为1得1，其他为0
和某些特定的值[ 2的n次 - 1 ]做按位与得到特定位上值
eg. 和 n & 1 = 得到n的最后一位的值 n & (16 - 1) = 第四位的值
eg. n &= -n 得到n的最右位置的 1

1.4 | 按位或
同为0得0，其他得1
eg. n |= ~(1 << m) + 1 保留n的m位，其他位置1

1.5 ～ 取反
全部位取反
eg. ~(1 << n) + 1
1 左移n位取反加1 得全部高位的1

1.6 ^ 异或
相同为0 不同为1
eg. n = m ^ m  n = 0
a ^ b = c => a ^ c = b 、 b ^ c = a

二、原码、反码、补码



三、位运算常用技巧

3.1 高位置0，低位保留
num & ((1 << 3) - 1) = num & 5[111] 只保留低三位。

3.2 取第n位
num & (1 << n) > 0 ? 1 : 0

3.3 消去最后一位1
[Brian Kernighan 算法]
num & (num - 1)
例如 10 & 9 => 1010 & 1001
num 到 num + 1
a、num 是偶数， num 最后一位 从0 到1。
b、num 是基数，最后一位置0，并前一位置1。

3.4 特征二进制数
0x55555555  5 => 0101奇数位是1
0xaaaaaaaa  10 => 1010 偶数位全是1
0xffffffff  15 => 1111

3.5 高位置1, 低位保留
num | ~(1 << n) + 1

3.6 判断第n位是否为1
num & (1 << n)) == 1 << n

3.6 二进制每位相加
相当于各位做异或操作，101 ^ 111。

3.7 二进制 计算相加进位值，
得到1010，相当于各位进行与操作得到101，再向左移一位得到1010，(101&111) << 1。



